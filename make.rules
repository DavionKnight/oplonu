################################################################################
#
# Copyright (C) 2008 Opulan Technologies Corp., All Rights Reserved
#
# FILENAME: make.rules
#
# DESCRIPTION: Defines common Make rules.
#              This is small set of rules to be included by all Makefiles.
#
#      Internal variables:
#              $_ = <path>/make
#              $* = $< = current .c file being processed
#              $@ = current destination file or directory being processed ( i.e. what's on the left side of the ":")
#              $^ = current dependency ( i.e. what's on the right side of the ":")
#
# Date Created (optional): 4/13/2008
#
# Authors (optional): Gan Zhiheng
#
# Reviewed by (optional):
#
# Edit History:
#
#
################################################################################


# Rule to make a subdirectory
$(SUBDIRS):
	@$(MAKE) -r -C $@


# All the SUBDIRS are nonexistent targets. 
.PHONY: $(SUBDIRS) $(COMMONTARGS)


# Rules to clean .o, .d, .so and .a files
# run commands separately because of error "argument list too long"
$(COMMONPREFIX)clean:
	-@echo "--- cleaning $(COMMONPREFIX) *.o *.d *.a *.so"
	-@rm -f $(LIBDIR)/main.o
ifneq ($(OBJECTS),)
	-@rm -f $(OBJECTS)
	-@rm -f $(OBJECTS:.o=.d)
endif
ifneq ($(LIB),)
	-@rm -f $(LIBDIR)/$(LIB)
endif
ifneq ($(SHARELIB),)
	-@rm -f $(LIBDIR)/$(SHARELIB)
endif


$(COMMONPREFIX)cleanlib:
	@echo "--- cleaning  *.a *.so"
	$(if $(LIB), -@rm -f $(LIBDIR)/$(LIB) )
	$(if $(SHARELIB), -@rm -f $(LIBDIR)/$(SHARELIB) )


# run commands separately because of error "argument list too long"
$(COMMONPREFIX)cleanall:
	-@echo "--- cleaning ALL *.o *.d *.a *.so"
	-@rm -f *.o $(LIBDIR)/*.o
	-@rm -f *.d $(LIBDIR)/*.d
	-@rm -f *.so $(LIBDIR)/*.a
	-@rm -f *.so $(LIBDIR)/*.so


# Rule to list names of all libraries (.a,.so) defined by Makefiles
$(COMMONPREFIX)liblist:
	@echo $(LIB)
	@echo $(SHARELIB)


ifdef OBJECTS
$(COMMONPREFIX)include:
	@echo `pwd`
	@for str in `cat -s $(OBJECTS:.o=.d) | sort -u | sed -e 'y/\\\/ /;s/  / /g;s/\n//g ;s/.*\ :\ .*\.c//g'`; do \
		echo "	$$str"; \
	done | grep '/' | sed -e 's/\(.*\)\/.*\.h/\1/g' | sort -u
	@echo
else
$(COMMONPREFIX)include:

endif

f13s:
	@printf "Building ONU-V1-F13 environment ... "
	@printf ONU_1PORT > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_f13s_voip_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

f23s:
	@printf "Building ONU-V1-F23-S27 environment ... "
	@printf ONU_4PORT_AR8228 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_f23s_voip_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

f13p:
	@printf "Building ONU-V1-F13 environment ... "
	@printf ONU_1PORT > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_f13p_voip_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""
f13p_wdt:
	@printf "Building ONU-V1-F13-wdt environment ... "
	@printf ONU_1PORT > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5; make onu_f13p_voip_pcm_wdt_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

f23p:
	@printf "Building ONU-V1-F23-S27 environment ... "
	@printf ONU_4PORT_AR8228 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_f23p_voip_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

f33:
	@printf "Building ONU-V1-F33-S27 environment ... "
	@printf ONU_4PORT_AR8228 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_f33_voip_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""	

rf100gna:
	@printf "Building ONU-V1E-RF100-GNA environment ... "
	@printf ONU_1PORT_V1E_RF100_GNA > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_c13_spi_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

rf100gnainband:
	@printf "Building ONU-V1E-RF100-GNA environment ... "
	@printf ONU_1PORT_V1E_RF100_GNA > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_f13_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""
rf100gnacpu300m:
	@printf "Building ONU-V1E-RF100-GNA environment ... "
	@printf ONU_1PORT_V1E_RF100_GNA > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_c13_spi_300m_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

rf100gnacpu300mate:
	@printf "Building ONU-V1E-RF100-GNA-ATE environment ... "
	@printf ONU_1PORT_V1E_RF100_GNA_ATE > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_c13_spi_300m_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

rf400gna:
	@printf "Building ONU-V1E-RF400-GNA environment ... "
	@printf ONU_4PORT_V1E_RF400_GNA > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_rf400_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

rf400gna_parallel:
	@printf "Building ONU-V1E-RF400-GNA environment ... "
	@printf ONU_4PORT_V1E_RF400_GNA > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_rf400p_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

c13v1e:
	@printf "Building ONU-V1E-C13 environment ... "
	@printf ONU_1PORT_V1E_C13 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_c13_spi_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""
c13v1e-cpu300m:
	@printf "Building ONU-V1E-C13 environment ... "
	@printf ONU_1PORT_V1E_C13 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_c13_spi_300m_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""


f13v1e:
	@printf "Building ONU-V1E-F13 environment ... "
	@printf ONU_1PORT_V1E_F13 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_f13_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

f23v1e:
	@printf "Building ONU-V1E-F23-S27 environment ... "
	@printf ONU_4PORT_V1E_F23 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_f23_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""

f23pv1e:
	@printf "Building ONU-V1E-F23-S27 environment ... "
	@printf ONU_4PORT_V1E_F23 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_f23p_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""


f33v1e:
	@printf "Building ONU-V1E-F33-S27 environment ... "
	@printf ONU_4PORT_V1E_F33 > $(TARGETDIR)/apps/opconn/project.config
	@if [ -d $(KERNEL_DIR)/linux-2.6.21.5 ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make onu_respin_f33_defconfig; \
		printf onu > $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID; \
	fi
	@sleep 1
	@echo "done."
	@echo ""


install:
	@echo "=== Preparing opconn "
	-@rm -rf $(KERNEL_DIR)/linux-2.6.21.5/root
	@if [ -f $(KERNEL_DIR)/linux-2.6.21.5/rootfs.tgz ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5/;tar xvzf rootfs.tgz; \
	fi
	cp -f $(TARGETDIR)/apps/opconn/build/opconn.img $(KERNEL_DIR)/linux-2.6.21.5/root/bin/
	@echo "=== Preparing modpost "
	@if [ ! -f $(KERNEL_DIR)/linux-2.6.21.5/scripts/mod/modpost ]; then \
		cd $(KERNEL_DIR)/linux-2.6.21.5;make -j1 CROSS_COMPILE="mips-linux-uclibc-" ARCH="mips" CONFIG_SHELL="/bin/bash" CC="mips-linux-uclibc-gcc" V=1 scripts;export CPUID=$(cat $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID);sh mklzma.sh; \
	fi
	@echo "=== Preparing UART1 modules "
	-@cp $(TARGETDIR)/apps/opconn/linux/uart_drv.ko $(KERNEL_DIR)/linux-2.6.21.5/root/modules/
	@echo "=== Preparing xmodem "
	-@cd $(TARGETDIR)/apps/opconn/linux/opl_xmodem; make clean;make
	-@cp $(TARGETDIR)/apps/opconn/linux/opl_xmodem/opl_xmodem.ko $(KERNEL_DIR)/linux-2.6.21.5/root/modules/
	@echo "=== Preparing busybox "
	cd $(TARGETDIR)/busybox/busybox-1.15.2/;make install;cp -rfP $(TARGETDIR)/busybox/busybox-1.15.2/_install/* $(KERNEL_DIR)/linux-2.6.21.5/root/
	@echo "=== Preparing pppoe "
	@echo "=== Preparing modules"
	@cd $(KERNEL_DIR)/modules/build;make clean;make
	@cp $(KERNEL_DIR)/modules/opl_cpuif/opl_cpuif.ko $(KERNEL_DIR)/linux-2.6.21.5/root/modules/
	@cp $(KERNEL_DIR)/modules/opl_reg/opl_reg_mmap.ko $(KERNEL_DIR)/linux-2.6.21.5/root/modules/
	@cp $(KERNEL_DIR)/modules/opl_minte/opl_minte.ko $(KERNEL_DIR)/linux-2.6.21.5/root/modules/
	@cp $(KERNEL_DIR)/modules/opl_uptm_intr/uptm_intr.ko $(KERNEL_DIR)/linux-2.6.21.5/root/modules/
	@rm -rf $(KERNEL_DIR)/linux-2.6.21.5/root/modules/tm.ko
	@if [ $(shell if [ -f $(TARGETDIR)/apps/opconn/project.config ]; then cat $(TARGETDIR)/apps/opconn/project.config; else printf ""; fi) == "ONU_1PORT" ] ; then \
		cd $(KERNEL_DIR)/modules/build;make tmc; \
		cp $(KERNEL_DIR)/modules/opl_tmc/tm.ko $(KERNEL_DIR)/linux-2.6.21.5/root/modules/; \
	fi
	@echo "=== Strip unneeded"
	find $(KERNEL_DIR)/linux-2.6.21.5/root -name ".svn" | xargs rm -rf
	#find $(KERNEL_DIR)/linux-2.6.21.5/root -type f ! -name "ld*" | xargs file | grep ELF | awk -F: '{print $$1}' | xargs -tl mips-linux-uclibc-strip --strip-unneeded
	@echo "=== Installing kernel "
	@cd $(KERNEL_DIR)/linux-2.6.21.5;export CPUID=`cat $(KERNEL_DIR)/linux-2.6.21.5/build_uimage/CPUID`;sh mklzma.sh
	cp -f $(KERNEL_DIR)/linux-2.6.21.5/wrt_uImage $(TARGETDIR)/build/opvos.bin
	@echo "=== Installing u-boot "
	-@cp -f $(TARGETDIR)/u-boot/u-boot.bin $(TARGETDIR)/build/

cleanos:
	@cd $(KERNEL_DIR)/linux-2.6.21.5;make clean

cleanmod:
	@cd $(KERNEL_DIR)/modules/build;make clean
	@cd $(TARGETDIR)/apps/opconn/linux/opl_xmodem;make clean

cleanboot:
	@cd ./u-boot;make distclean

env:
	@echo ""
	@echo "=== Current Build Environment ==="
	@echo "  TARGET     = $(TARGET)"
	@echo "  TARGET DIR = $(TARGETDIR)"
	@echo "  OUTPUT DIR = $(LIBDIR)"
	@echo "  LIB DIR = $(LIBDIR)"
	@echo ""
	@echo ""

help:
	@echo ""
	@echo "Build commands:"
	@echo "Usage: make [make_options] <command>"
	@echo ""
	@echo " Commands available in most subdirectories:"
	@echo "  f13s       - building F13 spi flash environment."
	@echo "  f13p       - building F13 parellel flash environment."
	@echo "  f23s    	- building F23-A8 spi flash environment."
	@echo "  f23p     	- building F23-A8 parellel flash environment."
	@echo "  nuke       - clean everything under build/ directory."
	@echo "  clean      - walks down the tree and removes .o, .d and .a files specified "
	@echo "               in OBJECTS variable, if any. Useful when you work only"
	@echo "               with you module and don't want to clean other module."
	@echo "               Example: cd to your directory and run make clean."
	@echo "  cleanos    - clean output files under os/linux-2.6.21.5"
	@echo "  cleanmod   - clean output files under os/modules"
	@echo "  cleanboot  - clean output files under u-boot"
	@echo "  cleanall   - walks down the tree and removes all .o, .d and .a files regardless"
	@echo "               of OBJECTS variable."
	@echo "  cleanlib   - walks down the tree and removes only .a files specified in"
	@echo "               LIB variable, if any."
	@echo "  liblist    - walks down the tree and prints list of libraries specified in"
	@echo "               LIB variable."
	@echo "  include    - list of directories from which header files are used."
	@echo "  install    - build OS image and copy files to ./build."
	@echo "  help       - this help screen."
	@echo "  env        - shows build environment settings."
	@echo ""
	@echo ""

nuke:
	@echo "Cleaning EVERYTHING in build directory!"
	-@rm -f $(TARGETDIR)/build/*
	@echo "Done."

strip: 
	@echo ""
	@$(STRIP) --strip-debug --strip-unneeded --discard-all $(LIBDIR)/$(TARGET)
	@echo "	+++ Strip $(TARGET) done. +++"
	@echo ""


# For debugging:
#	@echo "\$$@ = $@"
#	@echo "\$$% = $%"
#	@echo "\$$< = $<"
#	@echo "\$$? = $?"
#	@echo "\$$^ = $^"
#	@echo "\$$+ = $+"
#	@echo "\$$* = $*"

ifneq ( $@, clean )

# Rule to make header file dependencies for .c files
$(LIBDIR)/%.d: %.c Makefile
	@echo "--- $<	->	$@"
	@$(CC) -M -c -x c++ -pipe $(CCFLAGS) $(LOCALINCLUDE) $< \
	| $(SED) -e 's/\(.*\).o *:/!(LIBDIR)\/\1.o !(LIBDIR)\/\1.d : /;s/!/$$/g' 1> $@; \
	[ -s $@ ] || rm -f $@

#   With sub-shell - Also works
#	sh -ec "$(CC) -M -E -x c -pipe $(CCFLAGS) $(LOCALINCLUDE) $< \
#	| $(SED) -e \"s/\(.*\)\.o *:/!(LIBDIR)\/\1.o !(LIBDIR)\/\1.d : /;s/!/$$/g\" \
#	1> $@; [ -s $@ ] || rm -f $@"


# Rule to make header file dependencies for .cpp files
$(LIBDIR)/%.d: %.cpp Makefile
	@echo "--- $<	->	$@"
	@$(CC) -M -c -x c++ -pipe $(CCFLAGS) $(LOCALINCLUDE) $< \
	| $(SED) -e 's/\(.*\).o *:/!(LIBDIR)\/\1.o !(LIBDIR)\/\1.d : /;s/!/$$/g' 1> $@; \
	[ -s $@ ] || rm -f $@

#   With sub-shell - Also works
#	@sh -ec "$(CC) -M -E -x c++ -pipe $(CCFLAGS) $(LOCALINCLUDE) $< \
#	| $(SED) -e \"s/\(.*\)\.o *:/!(LIBDIR)\/\1.o !(LIBDIR)\/\1.d : /;s/!/$$/g\" \
#	1> $@; [ -s $@ ] || rm -f $@"

endif

# Rule to make object files from .c files
#                 v-- $(LIBDIR)/%.d  = Make complains "*** multiple target patterns"
$(LIBDIR)/%.o: %.c Makefile
	@echo "--- $<	->	$@"
	@$(CC) -W -c -x c $(OPTIMIZATION) $(CCFLAGS) $(LOCALINCLUDE) -o $@ $<

# Rule to make object file from .cpp files
#                   v-- $(LIBDIR)/%.d  = Make complains "*** multiple target patterns"
$(LIBDIR)/%.o: %.cpp Makefile
	@echo "--- $<	->	$@"
	@$(CC) -W -c -x c++ $(OPTIMIZATION) $(CCFLAGS) $(LOCALINCLUDE) -o $@ $<


# Application entry file
$(LIBDIR)/main.o: $(TARGETDIR)/main.c
	@echo "=== make $@"
	@echo "--- $<	->	$@"
	@$(CC) -W -c -x c $(OPTIMIZATION) $(CCFLAGS) $(LOCALINCLUDE) -o $@ $<


# Rule to make library file
# There must be at least one second delay after AR updated .a library file,
# otherwise 'make' does not realize that the next .o file is newer then
# the library and fails to add it. [A.D.]
$(LIBDIR)/$(LIB): $(OBJECTS) Makefile
	@echo "--- Building library $(LIBDIR)/$(LIB) ---"
	@$(AR) -rsv $(LIBDIR)/$(LIB) $(OBJECTS);sleep 1

# Rule to make library file
# There must be at least one second delay after AR updated .so library file,
# otherwise 'make' does not realize that the next .o file is newer then
# the library and fails to add it. [A.D.]
$(LIBDIR)/$(SHARELIB): $(OBJECTS) Makefile
	@echo "--- Building library $(LIBDIR)/$(SHARELIB) ---"
	@for d in $(OBJECTS); do \
		echo "so - $$d"; \
	done
	$(CC) $(OBJECTS) -shared -o $(LIBDIR)/$(SHARELIB) $(OPTIMIZATION) $(CCFLAGS) $(LIBS) $(LOCALINCLUDE);sleep 1

# Dummy rule to force execution of another rule
force: ;
